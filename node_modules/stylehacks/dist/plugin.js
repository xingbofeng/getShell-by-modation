"use strict";

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function plugin(targets, nodeTypes, _detect) {
    var Plugin = function () {
        function Plugin(css, result) {
            _classCallCheck(this, Plugin);

            this.nodes = [];
            this.css = css;
            this.result = result;
            this.targets = targets;
            this.nodeTypes = nodeTypes;
        }

        Plugin.prototype.push = function push(node, metadata) {
            metadata.message = "Bad " + metadata.identifier + ": " + metadata.hack;
            metadata.browsers = this.targets;
            node._stylehacks = metadata;
            this.nodes.push(node);
        };

        Plugin.prototype.any = function any(node) {
            var hasHack = false;
            if (~this.nodeTypes.indexOf(node.type)) {
                _detect.apply(this, arguments);
                if (node._stylehacks) {
                    hasHack = true;
                }
            }
            return hasHack;
        };

        Plugin.prototype.detect = function detect() {
            this.css.walk(function (node) {
                if (~this.nodeTypes.indexOf(node.type)) {
                    _detect.apply(this, arguments);
                }
            }.bind(this));
        };

        Plugin.prototype.detectAndResolve = function detectAndResolve() {
            this.detect();
            return this.resolve();
        };

        Plugin.prototype.detectAndWarn = function detectAndWarn() {
            this.detect();
            return this.warn();
        };

        Plugin.prototype.resolve = function resolve() {
            return this.nodes.forEach(function (node) {
                return node.remove();
            });
        };

        Plugin.prototype.warn = function warn() {
            var _this = this;

            return this.nodes.forEach(function (node) {
                var _node$_stylehacks = node._stylehacks;
                var message = _node$_stylehacks.message;
                var browsers = _node$_stylehacks.browsers;
                var identifier = _node$_stylehacks.identifier;
                var hack = _node$_stylehacks.hack;

                return node.warn(_this.result, message, { browsers: browsers, identifier: identifier, hack: hack });
            });
        };

        return Plugin;
    }();

    return Plugin;
}
exports.default = plugin;
module.exports = exports['default'];