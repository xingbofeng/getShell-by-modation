'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _plugin = require('../plugin');

var _plugin2 = _interopRequireDefault(_plugin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var targets = ['ie 5.5', 'ie 6', 'ie 7'];
var hacks = '!_$_&_*_)_=_%_+_,_._/_`_]_#_~_?_:_|'.split('_');

exports.default = (0, _plugin2.default)(targets, ['decl', 'atrule'], function (node) {
    var _this = this;

    if (node.type === 'decl') {
        var _ret = function () {
            // some values are not picked up by before, so ensure they are
            // at the beginning of the value
            hacks.some(function (hack) {
                if (!node.prop.indexOf(hack)) {
                    _this.push(node, {
                        identifier: 'property',
                        hack: node.prop
                    });
                    return true;
                }
            });
            var before = node.raws.before;

            if (!before) {
                return {
                    v: void 0
                };
            }
            hacks.some(function (hack) {
                if (~before.indexOf(hack)) {
                    _this.push(node, {
                        identifier: 'property',
                        hack: '' + before.trim() + node.prop
                    });
                    return true;
                }
            });
        }();

        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    } else if (node.type === 'atrule') {
        // test for the @property: value; hack
        var name = node.name;

        var len = name.length - 1;
        if (name.lastIndexOf(':') === len) {
            this.push(node, {
                identifier: 'property',
                hack: '@' + name.substr(0, len)
            });
        }
    }
});
module.exports = exports['default'];