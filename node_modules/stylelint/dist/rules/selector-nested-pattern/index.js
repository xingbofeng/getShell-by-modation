"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (pattern) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, {
      actual: pattern,
      possible: [_lodash.isRegExp, _lodash.isString]
    });
    if (!validOptions) {
      return;
    }

    var normalizedPattern = (0, _lodash.isString)(pattern) ? new RegExp(pattern) : pattern;

    root.walkRules(function (rule) {
      if (rule.parent.type !== "rule") {
        return;
      }
      if (!(0, _utils.isStandardSyntaxRule)(rule)) {
        return;
      }

      var selector = rule.selector;

      if (!(0, _utils.isStandardSyntaxSelector)(selector)) {
        return;
      }

      if (normalizedPattern.test(selector)) {
        return;
      }

      (0, _utils.report)({
        result: result,
        ruleName: ruleName,
        message: messages.expected(selector),
        node: rule
      });
    });
  };
};

var _lodash = require("lodash");

var _utils = require("../../utils");

var ruleName = exports.ruleName = "selector-nested-pattern";

var messages = exports.messages = (0, _utils.ruleMessages)(ruleName, {
  expected: function expected(selector) {
    return "Expected nested selector \"" + selector + "\" to match specified pattern";
  }
});