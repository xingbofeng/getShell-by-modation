"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (on, options) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, { actual: on }, {
      actual: options,
      possible: {
        ignore: ["descendant", "compounded"],
        ignoreTypes: [_lodash.isString]
      },
      optional: true
    });
    if (!validOptions) {
      return;
    }

    var ignoreDescendant = (0, _utils.optionsMatches)(options, "ignore", "descendant");
    var ignoreCompounded = (0, _utils.optionsMatches)(options, "ignore", "compounded");

    root.walkRules(function (rule) {
      var selector = rule.selector;
      var selectors = rule.selectors;


      if (!(0, _utils.isStandardSyntaxRule)(rule)) {
        return;
      }
      if (!(0, _utils.isStandardSyntaxSelector)(selector)) {
        return;
      }
      if (selectors.some(function (s) {
        return (0, _utils.isKeyframeSelector)(s);
      })) {
        return;
      }

      if (ignoreDescendant) {
        // Resolve each selector within the list before checking
        selectors.forEach(function (selector) {
          (0, _postcssResolveNestedSelector2.default)(selector, rule).forEach(function (selector) {
            checkSelector(selector, rule);
          });
        });
      } else {
        checkSelector(selector, rule);
      }
    });

    function checkSelector(selector, rule) {
      (0, _utils.parseSelector)(selector, result, rule, function (selectorAST) {
        selectorAST.walkTags(function (tag) {
          if (!(0, _utils.isStandardSyntaxTypeSelector)(tag)) {
            return;
          }

          if ((0, _utils.optionsMatches)(options, "ignoreTypes", tag.value)) {
            return;
          }

          if (ignoreDescendant && hasCombinatorBefore(tag)) {
            return;
          }

          if (ignoreCompounded && isCompounded(tag)) {
            return;
          }

          (0, _utils.report)({
            message: messages.rejected,
            node: rule,
            index: tag.sourceIndex,
            ruleName: ruleName,
            result: result
          });
        });
      });
    }
  };
};

var _lodash = require("lodash");

var _utils = require("../../utils");

var _postcssResolveNestedSelector = require("postcss-resolve-nested-selector");

var _postcssResolveNestedSelector2 = _interopRequireDefault(_postcssResolveNestedSelector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ruleName = exports.ruleName = "selector-no-type";

var messages = exports.messages = (0, _utils.ruleMessages)(ruleName, {
  rejected: "Unexpected type selector"
});

function hasCombinatorBefore(node) {
  return node.parent.nodes.slice(0, node.parent.nodes.indexOf(node)).some(isCombinator);
}

function isCompounded(node) {
  if (node.prev() && !isCombinator(node.prev())) {
    return true;
  }
  if (node.next() && !isCombinator(node.next())) {
    return true;
  }
  return false;
}

function isCombinator(node) {
  if (!node) return false;
  return (0, _lodash.get)(node, "type") === "combinator";
}