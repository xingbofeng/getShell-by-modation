"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (actual, options) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, { actual: actual }, {
      actual: options,
      possible: {
        ignorePseudoElements: [_lodash.isString]
      },
      optional: true
    });
    if (!validOptions) {
      return;
    }

    root.walkRules(function (rule) {
      if (!(0, _utils.isStandardSyntaxRule)(rule)) {
        return;
      }
      var selector = rule.selector;

      // Return early before parse if no pseudos for performance

      if (selector.indexOf(":") === -1) {
        return;
      }

      (0, _utils.parseSelector)(selector, result, rule, function (selectorTree) {
        selectorTree.walkPseudos(function (pseudoNode) {
          var value = pseudoNode.value;


          if (!(0, _utils.isStandardSyntaxSelector)(value)) {
            return;
          }

          // Ignore pseudo-classes
          if (value.slice(0, 2) !== "::") {
            return;
          }

          if ((0, _utils.optionsMatches)(options, "ignorePseudoElements", pseudoNode.value.slice(2))) {
            return;
          }

          var name = value.slice(2);

          if (_postcss.vendor.prefix(name) || _keywordSets.pseudoElements.has(name.toLowerCase())) {
            return;
          }

          (0, _utils.report)({
            message: messages.rejected(value),
            node: rule,
            index: pseudoNode.sourceIndex,
            ruleName: ruleName,
            result: result
          });
        });
      });
    });
  };
};

var _utils = require("../../utils");

var _lodash = require("lodash");

var _keywordSets = require("../../reference/keywordSets");

var _postcss = require("postcss");

var ruleName = exports.ruleName = "selector-pseudo-element-no-unknown";

var messages = exports.messages = (0, _utils.ruleMessages)(ruleName, {
  rejected: function rejected(selector) {
    return "Unexpected unknown pseudo-element selector \"" + selector + "\"";
  }
});