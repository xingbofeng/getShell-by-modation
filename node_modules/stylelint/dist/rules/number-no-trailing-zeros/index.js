"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (actual) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, { actual: actual });
    if (!validOptions) {
      return;
    }

    root.walkAtRules(function (atRule) {
      if (atRule.name.toLowerCase() === "import") {
        return;
      }

      check(atRule, atRule.params, _utils.atRuleParamIndex);
    });

    root.walkDecls(function (decl) {
      return check(decl, decl.value, _utils.declarationValueIndex);
    });

    function check(node, value, getIndex) {
      // Get out quickly if there are no periods
      if (value.indexOf(".") === -1) {
        return;
      }

      (0, _postcssValueParser2.default)(value).walk(function (valueNode) {
        // Ignore `url` function
        if (valueNode.type === "function" && valueNode.value.toLowerCase() === "url") {
          return false;
        }

        // Ignore strings, comments, etc
        if (valueNode.type !== "word") {
          return;
        }

        var match = /(\.\d*)0+(?:\D|$)/.exec(valueNode.value);

        if (match === null) {
          return;
        }

        (0, _utils.report)({
          message: messages.rejected,
          node: node,
          index: getIndex(node) + valueNode.sourceIndex + match.index + match[1].length,
          result: result,
          ruleName: ruleName
        });
      });
    }
  };
};

var _utils = require("../../utils");

var _postcssValueParser = require("postcss-value-parser");

var _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ruleName = exports.ruleName = "number-no-trailing-zeros";

var messages = exports.messages = (0, _utils.ruleMessages)(ruleName, {
  rejected: "Unexpected trailing zero(s)"
});