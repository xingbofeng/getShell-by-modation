"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (expectation, options) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, {
      actual: expectation,
      possible: ["always", "never"]
    }, {
      actual: options,
      possible: {
        except: ["empty"]
      },
      optional: true
    });
    if (!validOptions) {
      return;
    }

    root.walkAtRules(checkStatement);
    root.walkRules(checkStatement);

    function checkStatement(statement) {
      if (statement.type === "atrule") {
        checkAtRuleParams(statement);
      }

      statement.walkDecls(function (decl) {
        (0, _utils.functionArgumentsSearch)(decl.toString().toLowerCase(), "url", function (args, index) {
          checkArgs(args, decl, index, "url");
        });
      });
    }

    function checkAtRuleParams(atRule) {
      var atRuleParamsLowerCase = atRule.params.toLowerCase();
      (0, _utils.functionArgumentsSearch)(atRuleParamsLowerCase, "url", function (args, index) {
        checkArgs(args, atRule, index + (0, _utils.atRuleParamIndex)(atRule), "url");
      });
      (0, _utils.functionArgumentsSearch)(atRuleParamsLowerCase, "url-prefix", function (args, index) {
        checkArgs(args, atRule, index + (0, _utils.atRuleParamIndex)(atRule), "url-prefix");
      });
      (0, _utils.functionArgumentsSearch)(atRuleParamsLowerCase, "domain", function (args, index) {
        checkArgs(args, atRule, index + (0, _utils.atRuleParamIndex)(atRule), "domain");
      });
    }

    function checkArgs(args, node, index, functionName) {
      var shouldHasQuotes = expectation === "always";

      var leftTrimmedArgs = args.trimLeft();
      if (!(0, _utils.isStandardSyntaxUrl)(leftTrimmedArgs)) {
        return;
      }
      var complaintIndex = index + args.length - leftTrimmedArgs.length;
      var hasQuotes = leftTrimmedArgs[0] === "'" || leftTrimmedArgs[0] === "\"";

      var trimmedArg = args.trim();
      var isEmptyArgument = _lodash2.default.includes(["", "''", "\"\""], trimmedArg);
      if ((0, _utils.optionsMatches)(options, "except", "empty") && isEmptyArgument) {
        shouldHasQuotes = !shouldHasQuotes;
      }

      if (shouldHasQuotes) {
        if (hasQuotes) {
          return;
        }
        complain(messages.expected(functionName), node, complaintIndex);
      } else {
        if (!hasQuotes) {
          return;
        }
        complain(messages.rejected(functionName), node, complaintIndex);
      }
    }

    function complain(message, node, index) {
      (0, _utils.report)({
        message: message,
        node: node,
        index: index,
        result: result,
        ruleName: ruleName
      });
    }
  };
};

var _utils = require("../../utils");

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ruleName = exports.ruleName = "function-url-quotes";

var messages = exports.messages = (0, _utils.ruleMessages)(ruleName, {
  expected: function expected() {
    return "Expected quotes";
  },
  rejected: function rejected() {
    return "Unexpected quotes";
  }
});