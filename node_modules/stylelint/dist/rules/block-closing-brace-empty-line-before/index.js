"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (expectation) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, {
      actual: expectation,
      possible: ["always-multi-line", "never"]
    });
    if (!validOptions) {
      return;
    }

    // Check both kinds of statements: rules and at-rules
    root.walkRules(check);
    root.walkAtRules(check);

    function check(statement) {
      // Return early if blockless or has empty block
      if (!(0, _utils.hasBlock)(statement) || (0, _utils.hasEmptyBlock)(statement)) {
        return;
      }

      // Get whitespace after ""}", ignoring extra semicolon
      var before = statement.raw("after").replace(/;+/, "");
      if (before === undefined) {
        return;
      }

      // Calculate index
      var statementString = statement.toString();
      var index = statementString.length - 1;
      if (statementString[index - 1] === "\r") {
        index -= 1;
      }

      // Set expectation
      var expectEmptyLineBefore = expectation === "always-multi-line" && !(0, _utils.isSingleLineString)((0, _utils.blockString)(statement)) ? true : false;

      // Check for at least one empty line
      var hasEmptyLineBefore = (0, _utils.hasEmptyLine)(before);

      // Return if the expectation is met
      if (expectEmptyLineBefore === hasEmptyLineBefore) {
        return;
      }

      var message = expectEmptyLineBefore ? messages.expected : messages.rejected;
      (0, _utils.report)({
        message: message,
        result: result,
        ruleName: ruleName,
        node: statement,
        index: index
      });
    }
  };
};

var _utils = require("../../utils");

var ruleName = exports.ruleName = "block-closing-brace-empty-line-before";

var messages = exports.messages = (0, _utils.ruleMessages)(ruleName, {
  expected: "Expected empty line before closing brace",
  rejected: "Unexpected empty line before closing brace"
});